function [NNdist] = NN1(k,X1, X2, classA, classB)

% Defintion: For a given x you wish to classify, you compute the distance
% between x and all labeled samples, and you assign x the same class as its
% nearest neighbour

% Finding distance between points

% Compute distances between sample points and all data points
Adist = pdist2(classA, [X1(:) X2(:)]);
Bdist = pdist2(classB, [X1(:) X2(:)]);

% reshape into a 2D grid
Adist_grid = reshape(Adist, size(X1));
Bdist_grid = reshape(Bdist, size(X1));

% initialize NN_boundary
NNdist = zeros(size(X1));

% classify each point
for i = 1:size(X1, 1)
    for j = 1:size(X1, 2)
        if k == 1
            if Adist_grid(i,j) < Bdist_grid(i,j)
                NNdist(i,j) = 0;
            else
                NNdist(i,j) = 1;
            end
        else
            meanA = mean(smallest_k(Adist_grid(i,j), k));
            sampleB_mean = mean(smallest_k(Bdist(i,j), k));
            if sampleA_mean < sampleB_mean
                NNdist(i,j) = 0;
            else
                NNdist(i,j) = 1;
            end
        end
    end
end

function k_smallest = smallest_k(x, k)
    % returns the k smallest elements of x in ascending order
    [~, sorted_indices] = sort(x);
    k_smallest = x(sorted_indices(1:k));
end
